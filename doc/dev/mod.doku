====== How to write a simple module ? ======

===== Overview =====

Modules are Python  programs installed in the ''THOT/mods'' directory
and invoked by ''@use MOD'' syntax. The module is simply retrieved
from the ''mods'' directory by appending ''.py'' to the //MOD// identifier.

Module are usual Python programs that needs only to contain list of words or lines syntaxes. These lists contains new syntaxes that are added to the @(THOT) current pool of syntaxes. Usually, a module is used to add syntactic element to the parsed text file but they may also insert specific object in the document tree with specific effects at generation time.

The basic code of a module has the following structure:
<code py>
def f1(man, match):
	...

def f2(man, match):
	...

__words__ = [
	(f1, RE_1, DOC_1),
	...
]

__lines__ = [
	(f2, RE_2, DOC_2),
	...
]
</code>

Where ''RE_''//i// are regular expression and ''DOC_''//i// are simple strings aimed to be displayed to human user (with ''--list-syntax'' option for example).

The parser manager, each time a line is retrieved, first attempt to
find a line scanner matching the full line. Else it splits the line
in pieces according to the recognition of word-level scanners.

A scanner, word or line, is composed by a triple whose second value
is a regular expression string (as produced by Python ''re'' module)
used to match text and, if match is successful, the function of the first component is called passing it as argument the parser manager and the match resulting object. At this point, this function may invoke any method of the parser manager
to build the document.


===== Simple Example =====

In this example, we just want to detect a smiley ''o||'' and replace
it by a specific image ''cyclops.png''. We just have to add a word-level
scanner as in the following:

<code py>
import doc

def process(man, match):
	man.send(doc.ObjectEvent(doc.L_WORD, doc.ID_NEW, doc.Image("/PATH_TO_IMAGE/cyclops.png")))

__words__ = [
	(process, "o\|\|", """detect o||.""")
]
</code>

The ''process'' function just generates an ''ObjectEvent'' (at word level)
whose realization produces the given image.


===== Open-Close Tag Example =====

The open-close example is slightly more complex. We want to add a new
style, for example a new style named ''flash'' that is introduced
by ''!<'' starting tag and ended by ''>!'' ending tag.

We have to recognize starting and ending words and generating the
matching object creation:
<code py>
import doc

def open(man, match):
	man.send(doc.OpenStyleEvent("flash"))

def close(man, match):
	man.send(doc.CloseStyleEvent("flash"))

__words__ = [
	(open,  "!<", """open a flashed text."""),
	(close, ">!", """close a flashed text.""")
]
</code>

Naturally, the result will be significant only if the back-end supports
this kind of style.

Things are even simpler if we use the same symbol for opening and
closing the style (let be ''!!''):
<code py>
import doc

def process(man, style):
	man.send(doc.StyleEvent("flash"))

__words__ = [
	(process, "!!", """open and close a flashed text"""))
</code>

The ''StyleEvent'' has a special behaviour: if a style of the same
kind is already openeded, it acts as a closing style event.


===== Syntax with argument =====

In this example, we add the syntax of a link as ''==''//URL//''==''. The syntax declaration is given below:
<code python>
__words__ = [
	(make_link, "==(?<URL_mine>[^=]*)==", """Insert a link to the given URL.""")
]
</code>

Notice the notation of the group in the regular expression using ''(?<ID>''...'')''. As, for the sake of performances, the word regular expression are mixed together, the usual group notation, ''(''...'')'', cannot be used to retrieve the grouped characters. The notation ''(?<ID>''...'')'' allows to give an identifier to the group that is used in function ''make_link''() defined below:
<code python>
def make_link(man, match):
	url = match.group('URL_mine')
	man.send(doc.ObjectEvent(doc.L_WORD, doc.ID_NEW_LINK, doc.Link(url)))
	man.send(doc.ObjectEvent(doc.L_WORD, doc.ID_NEW, doc.Word(url)))
	man.send(doc.CloseEvent(doc.L_WORD, doc.ID_END_LINK, "link"))
</code>

Notice also the format used for the identifier ''URL_mine''. First, all regular expression group names of the words must be different. Second, the documentation extractor for @(THOT) syntax process the regular expressions to make them as readable as possible and replaces a named group by its identifier without any character following the first '_' in order to make the group identifier match with the documentation. In our example, the displayed regular expression will be ''==/URL/==''.

 

===== Embedding Example =====

In this paragraph, we will show how we can add a new style of paragraph-level
item. The goal is to allows to output a code listing whose lines have been numbered using the syntax below:
<code c>
<ncode>
#include <stdio.h>
int main(void) {
  printf("Hello, World !\n");
}
</ncode>
</code>

The output will be:
<code c>
   1 #include <stdio.h>
   2 int main(void) {
   3   printf("Hello, World !\n");
   4 }
</code>

To do this, we have to:
  * match the opening tag ''<ncode>'',
  * avoid the parser manager to process the lines until close tag ''</ncode>'',
  * generate an object that performs the document generation according to our needs.

Basically, the module is defined as below. We just need to install a line scanner matching the open tag (notice that the regular expression must match
the whole line):
<code py>
import doc
import parser
import re

def process(man, match):
	parser.BlockParser(man, MyBlock(), re.compile("^\s*<\/ncode>\s*$"))

__lines__ = [
	(process, "^\s*<ncode>\s*$", """code area with numbered lines""")
]
</code>

The ''process'' is a bit more complex. It creates a parser that will
install itself in the parser manager. Then, read lines from the text file
will go this parser (ignoring the top-level parser of @(THOT)) and will
be stored in the ''MyBlock'' object (that must inherit from ''Container'').
It stops processing text lines as soon as the third-argument regular
expression is found. Then, it generates an ''ObjectEvent'' event with
our object and re-enable the top-level parser in order to let
normal processing to go on.

Our ''MyBlock'' class will inherit from ''doc.Block()'' class and
we will just overload the ''gen'' to give a number to each line.

<code py>
class MyBlock(doc.Block):
	def gen(self, generator):
		new_content = []
		i = 1
		for l in self.content:
			new_content.append("% 4d %s" % (i, l))
			i = i + 1
		self.content = new_content
		doc.Block(self, generator)
</code>
